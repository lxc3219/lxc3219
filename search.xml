<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IntelliJ IDEA 集成和移除自定义的 Maven 骨架</title>
    <url>/archives/25be9ab7.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><h1 id="IntelliJ-IDEA-集成和移除自定义的-Maven-骨架"><a href="#IntelliJ-IDEA-集成和移除自定义的-Maven-骨架" class="headerlink" title="IntelliJ IDEA 集成和移除自定义的 Maven 骨架"></a>IntelliJ IDEA 集成和移除自定义的 Maven 骨架</h1><blockquote><p>本文描述的是 IntelliJ IDEA 集成和移除自定义的 Maven 骨架的操作流程。</p></blockquote><p><strong>注意：本文描述是在 Windows 环境下操作的，Linux、MAC 可能有所出入。</strong></p><a id="more"></a><h2 id="添加骨架"><a href="#添加骨架" class="headerlink" title="添加骨架"></a>添加骨架</h2><p>在 IntelliJ IDEA 中按照以下流程操作即可</p><ul><li>新建项目 <code>File &gt; New &gt; Project</code></li><li>选择 Maven 并勾选 <code>Create from archetype</code></li><li>点击 <code>Add Archetype</code> 按钮</li><li>填写 <code>GroupId</code></li><li>填写 <code>ArtifactId</code></li><li>填写 <code>Version</code></li><li>点击 <code>OK</code></li></ul><blockquote><p><code>Add Archetype</code> 步骤只需执行一次，以后可直接选择对应的骨架创建项目。</p></blockquote><p><img src="/archives/25be9ab7/maven%E6%B7%BB%E5%8A%A0%E9%AA%A8%E6%9E%B6%E6%93%8D%E4%BD%9C1.png" alt><br><img src="/archives/25be9ab7/maven%E6%B7%BB%E5%8A%A0%E9%AA%A8%E6%9E%B6%E6%93%8D%E4%BD%9C2.png" alt></p><h2 id="移除骨架"><a href="#移除骨架" class="headerlink" title="移除骨架"></a>移除骨架</h2><p>在 <code>C:\Users\${user}.IntelliJIdea${version}\system\Maven\Indices</code> 中找到 UserArchetypes.xml 文件，删除对应的 maven 骨架配置信息，重启IntelliJ IDEA 生效。</p><p><img src="/archives/25be9ab7/maven%E7%A7%BB%E9%99%A4%E9%AA%A8%E6%9E%B6%E6%93%8D%E4%BD%9C.png" alt></p><p>到此为止，在 IntelliJ IDEA 中集成和移除自定义的 Maven 骨架的操作就结束了。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>可能有些朋友是使用 <code>mvn archetype:generate -DarchetypeCatalog=local</code> 命令生成项目，这种交互模式会在选择列表展示本地的所有 Maven 骨架，包括一些测试实验性质的骨架。所以我们要将其彻底删除。</p><p><strong>进入本地仓库目录找到对应的骨架删除即可</strong></p><blockquote><p>本地仓库默认 <code>${user.home}/.m2/repository</code><br>若特别设置过忘记的话，可查看 <code>${MAVEN_HOME}\conf\settings.xml</code> 文件中的 localRepository 标签信息</p></blockquote><p><img src="/archives/25be9ab7/maven%E5%88%A0%E9%99%A4%E9%AA%A8%E6%9E%B6%E6%96%87%E4%BB%B6.png" alt></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>intellij idea</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 驱动 com.mysql.cj.jdbc.Driver</title>
    <url>/archives/89094d45.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><h2 id="两种驱动"><a href="#两种驱动" class="headerlink" title="两种驱动"></a>两种驱动</h2><p>MySQL 驱动的类型跟驱动的版本有关，其中 com.mysql.jdbc.Driver 是 mysql-connector-java 5 中的，com.mysql.cj.jdbc.Driver 是 mysql-connector-java 6.x 以及后续版本支持的。</p><a id="more"></a><h2 id="版本支持"><a href="#版本支持" class="headerlink" title="版本支持"></a>版本支持</h2><p><strong>mysql-connector-java 8.x支持mysql 5.6,5.7,5.8</strong></p><p><img src="/archives/89094d45/%E9%A9%B1%E5%8A%A8%E7%89%88%E6%9C%AC%E6%94%AF%E6%8C%81.png" alt></p><h2 id="com-mysql-cj-jdbc-Driver"><a href="#com-mysql-cj-jdbc-Driver" class="headerlink" title="com.mysql.cj.jdbc.Driver"></a>com.mysql.cj.jdbc.Driver</h2><p><strong>使用 com.mysql.cj.jdbc.Driver 驱动需要指定时区 serverTimezone</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driverClassName&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8mb4&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;GMT%2B8</span><br><span class="line">username&#x3D;root</span><br><span class="line">password&#x3D;root</span><br></pre></td></tr></table></figure><blockquote><p>serverTimezone=UTC：比中国时间早8个小时<br>serverTimezone=GMT%2B8，中国时区，%2B是“+”<br>serverTimezone=Asia/Hongkong，中国时区<br>serverTimezone=Asia/Shanghai，中国时区</p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 加载本地依赖并打包</title>
    <url>/archives/758bf931.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><blockquote><p>本文描述的是 spring boot 项目如何加载本地依赖并且打包的过程。</p></blockquote><a id="more"></a><h2 id="加载本地依赖"><a href="#加载本地依赖" class="headerlink" title="加载本地依赖"></a>加载本地依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aspose.words<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspose-words-jdk16<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>16.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/aspose-words-jdk16-16.8.0.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>scope 的值要设置为 system<br>systemPath 的值，指向 jar 的路径</p></blockquote><h2 id="将本地依赖打进包"><a href="#将本地依赖打进包" class="headerlink" title="将本地依赖打进包"></a>将本地依赖打进包</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>        </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>        </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>        </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span>    </span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span>        </span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span>            </span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span>        </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span>    </span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>         </span><br><span class="line">                <span class="comment">&lt;!-- 将 scope=system 的依赖打进包里去 --&gt;</span>            </span><br><span class="line">                <span class="tag">&lt;<span class="name">includeSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeSystemScope</span>&gt;</span>                   </span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 切换镜像源</title>
    <url>/archives/82d4c19.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><p>默认情况下，Maven 是去国外的中央仓库下载所需的依赖，在没有 VPN 的协助下，访问的速度很慢。故要将镜像源切换为国内的镜像源，以提高访问速度。<br>此处推荐使用<strong>阿里的镜像源</strong>（<a href="http://maven.aliyun.com/nexus/content/groups/public）" target="_blank" rel="noopener external nofollow noreferrer">http://maven.aliyun.com/nexus/content/groups/public）</a></p><a id="more"></a><h2 id="切换镜像源"><a href="#切换镜像源" class="headerlink" title="切换镜像源"></a>切换镜像源</h2><h3 id="全局生效"><a href="#全局生效" class="headerlink" title="全局生效"></a>全局生效</h3><p>在 <code>${MAVEN_HOME}\conf\settings.xml</code> 文件的 <code>&lt;/mirrors&gt;...&lt;/mirrors&gt;</code> 内部加入以下代码</p><blockquote><p>Maven 安装路径忘记的话可以在 cmd 控制台输入 <code>mvn -v</code> 查看</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimvn<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="当前项目生效"><a href="#当前项目生效" class="headerlink" title="当前项目生效"></a>当前项目生效</h3><p>在工程的 pom.xml 中添加以下内容</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="其他镜像源"><a href="#其他镜像源" class="headerlink" title="其他镜像源"></a>其他镜像源</h2><ul><li><a href="http://www.sonatype.org/nexus/" target="_blank" rel="noopener external nofollow noreferrer">http://www.sonatype.org/nexus/</a></li><li><a href="http://mvnrepository.com/" target="_blank" rel="noopener external nofollow noreferrer">http://mvnrepository.com/</a></li><li><a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener external nofollow noreferrer">http://repo1.maven.org/maven2</a></li><li><a href="http://repo2.maven.org/maven2/" target="_blank" rel="noopener external nofollow noreferrer">http://repo2.maven.org/maven2/</a></li><li><a href="http://uk.maven.org/maven2/" target="_blank" rel="noopener external nofollow noreferrer">http://uk.maven.org/maven2/</a></li><li><a href="http://repository.jboss.org/nexus/content/groups/public" target="_blank" rel="noopener external nofollow noreferrer">http://repository.jboss.org/nexus/content/groups/public</a></li><li><a href="http://maven.oschina.net/content/groups/public/" target="_blank" rel="noopener external nofollow noreferrer">http://maven.oschina.net/content/groups/public/</a></li><li><a href="http://maven.antelink.com/content/repositories/central/" target="_blank" rel="noopener external nofollow noreferrer">http://maven.antelink.com/content/repositories/central/</a></li><li><a href="http://nexus.openkoala.org/nexus/content/groups/Koala-release/" target="_blank" rel="noopener external nofollow noreferrer">http://nexus.openkoala.org/nexus/content/groups/Koala-release/</a></li><li><a href="http://maven.tmatesoft.com/content/groups/public/" target="_blank" rel="noopener external nofollow noreferrer">http://maven.tmatesoft.com/content/groups/public/</a></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 依赖冲突</title>
    <url>/archives/9f7de2dd.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><h2 id="为什么会冲突？"><a href="#为什么会冲突？" class="headerlink" title="为什么会冲突？"></a>为什么会冲突？</h2><ol><li>每个 Java 项目都是一系列 Java 程序的集合，或多或少会引用一些第三方依赖。</li><li>在同一个类加载器中，相同全限定类名的 Class 只会被加载一次。</li><li>加载到 JVM 中的这个类未必就是我们需要的版本（需要高版本却选择了低版本、依赖不向下兼容）</li></ol><a id="more"></a><blockquote><p>JVM 有类加载机制，有双亲委派模型，它保证了 Java 类加载的安全性，例如 JDK 中核心类库通过 BootstrapClassloader 去加载，我们编写的代码是无法改写 JVM 中的核心类，从而保证了安全性。Maven 加载类也是通过其自定义的类加载器进行，在同一个类加载器中，相同全限定类名的 Class 只会被加载一次，因此不可能出现一个相同的类名，两个不同版本的类在一个 JVM 中（<strong>除非两个版本是不同的类加载器加载的</strong>）。</p></blockquote><h2 id="Maven-的仲裁机制"><a href="#Maven-的仲裁机制" class="headerlink" title="Maven 的仲裁机制"></a>Maven 的仲裁机制</h2><p>通过 Maven 引入的 Jar 包，Maven 有<strong>路径最短原则以及定义顺序原则和覆写优先原则</strong>保证了由 Maven引入的 jar 包是唯一的，并且可以通过此规则判断出最终加载到 JVM 的是哪个版本。</p><h3 id="1-路径最短原则"><a href="#1-路径最短原则" class="headerlink" title="1. 路径最短原则"></a>1. 路径最短原则</h3><p>若无版本声明，则按照“短路径优先”的原则（Maven2.0）进行仲裁，即选择依赖树中路径最短的版本</p><h3 id="2-定义顺序原则"><a href="#2-定义顺序原则" class="headerlink" title="2. 定义顺序原则"></a>2. 定义顺序原则</h3><p>若路径长度一致，则按照“第一声明优先”的原则进行仲裁，即选择 POM 中最先声明的版本</p><h3 id="3-覆写优先原则"><a href="#3-覆写优先原则" class="headerlink" title="3. 覆写优先原则"></a>3. 覆写优先原则</h3><p>优先按照依赖管理<dependencymanagement>元素中指定的版本声明进行仲裁，此时下面的两个原则都无效了</dependencymanagement></p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><ol><li>通过 Maven Helper 插件查看依赖树，手动 exclude 掉不需要的版本</li><li>通过 dependencyManagement 指定统一的版本，子类只需要指定包名即可复用父类的版本号，避免不必要的混乱。</li><li>类隔离机制：使用不同的 ClassLoader 加载不同版本的三方依赖，进而隔离包冲突问题<ol><li><a href="https://github.com/sofastack/sofa-ark" target="_blank" rel="noopener external nofollow noreferrer">蚂蚁金服的 SOFAArk</a></li><li>OSGI</li></ol></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/v-mbc5EXQ-kVrcb2o6kSBw" target="_blank" rel="noopener external nofollow noreferrer">https://mp.weixin.qq.com/s/v-mbc5EXQ-kVrcb2o6kSBw</a></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 上传本地依赖至远程仓库</title>
    <url>/archives/78861363.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId&#x3D;com.ibm -DartifactId&#x3D;connector -Dversion&#x3D;1.0.0 -Dpackaging&#x3D;jar -Dfile&#x3D;D:\ibm\connector\1.0.0\connector-1.0.0.jar -Durl&#x3D;http:&#x2F;&#x2F;192.168.1.1:8081&#x2F;repository&#x2F;3rdparty&#x2F; -DrepositoryId&#x3D;3rdparty</span><br></pre></td></tr></table></figure><blockquote><p>-DgroupId：依赖的 groupId<br>-DartifactId：依赖的 artifactId<br>-Dversion：依赖的 version<br>-Dpackaging：依赖的格式<br>-Dfile：依赖的本地存储位置<br>-Durl：远程仓库位置<br>-DrepositoryId：远程仓库 Id</p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 单继承及依赖杂乱问题</title>
    <url>/archives/c74431b2.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ol><li>单继承<br>maven 的继承模式属于单继承，也就是说子 model 中只能出现一个 parent 标签。</li><li>依赖杂乱<br>parent 模块中，dependencyManagement 中预定义太多的依赖，造成 pom 文件过长，而且很乱。</li></ol><a id="more"></a><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p><strong>要求 maven2.9 以上版本</strong></p><ol><li>根据单一职责原则，将 dependency 分类，每一类建立单独的 pom 文件</li><li>在需要使用到这些依赖的子 model 中，使用 dependencyManagement 管理依赖，并 import scope 依赖</li></ol><blockquote><p>注意：<code>&lt;scope&gt;import&lt;/scope&gt;</code> 只能用在 dependencyManagement 里面，且仅用于 <code>&lt;type&gt;pom&lt;/type&gt;</code> 的 dependency</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/huahua035/p/7680607.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/huahua035/p/7680607.html</a></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>全局异常处理实现方案</title>
    <url>/archives/d830ded1.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>全局统一返回实现方案</title>
    <url>/archives/e5e17584.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义 spring boot 启动器</title>
    <url>/archives/859d1044.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>Spring 官方 Starter 命名为 <code>spring-boot-starter-{name}</code>。<br>非官方 Starter 命名应遵循 <code>{name}-spring-boot-starter</code> 的格式。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>Spring Boot 项目在启动时会扫描项目所依赖的 JAR 包，寻找这些 JAR 包的 META-INF 文件夹下的 spring.factories 文件，根据 spring.factories 文件的配置信息加载对应的 AutoConfigure 类，然后根据 @Conditional 系列注解，进行自动配置并将类实例注入到 IOC 容器。</p><a id="more"></a><h2 id="demo-spring-boot-starter"><a href="#demo-spring-boot-starter" class="headerlink" title="demo-spring-boot-starter"></a>demo-spring-boot-starter</h2><p>创建名为 <code>demo-spring-boot-starter</code> 的 maven 工程，在其中分别创建 People、PeopleProperties、PeopleAutoConfigure 类以及 spring.factories 文件。</p><h3 id="创建-People-类"><a href="#创建-People-类" class="headerlink" title="创建 People 类"></a>创建 People 类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.suifeng.demo.spring.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String gender;   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name, String gender)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">this</span>.name = name;        </span><br><span class="line">        <span class="keyword">this</span>.gender = gender;    </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-PeopleProperties-类"><a href="#创建-PeopleProperties-类" class="headerlink" title="创建 PeopleProperties 类"></a>创建 PeopleProperties 类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.suifeng.demo.spring.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"people"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleProperties</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-PeopleAutoConfigure-类"><a href="#创建-PeopleAutoConfigure-类" class="headerlink" title="创建 PeopleAutoConfigure 类"></a>创建 PeopleAutoConfigure 类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.suifeng.demo.spring.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.suifeng.demo.spring.boot.People;</span><br><span class="line"><span class="keyword">import</span> org.suifeng.demo.spring.boot.PeopleProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(People<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(<span class="title">PeopleProperties</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">PeopleAutoConfigure</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>    </span><br><span class="line">    PeopleProperties peopleProperties;    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>    </span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>    </span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"people"</span>, value = <span class="string">"enabled"</span>, havingValue = <span class="string">"true"</span>)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> People <span class="title">people</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> People(peopleProperties.getName(), peopleProperties.getGender());    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-spring-factories"><a href="#配置-spring-factories" class="headerlink" title="配置 spring.factories"></a>配置 spring.factories</h3><p>在静态资源文件夹下创建 resources/META-INF/spring.factories 文件，文件内容如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;org.suifeng.demo.spring.boot.PeopleAutoConfigure</span><br></pre></td></tr></table></figure><blockquote><p>“=”左边的 <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code> 为 <code>EnableAutoConfiguration</code> 注解的类名全限定名，在这个配置文件中为固定值。</p><p>“=”右边的 <code>org.suifeng.demo.spring.boot.PeopleAutoConfigure</code> 为自定义 AutoConfigure 配置类的全限定名，多个的话用“,”分隔开。</p></blockquote><h3 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h3><p>执行 <code>mvn clean install</code> 命令生成 demo-spring-boot-starter.jar 并部署到本地仓库，供其他程序调用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><p>到此为止，一个简版的 demo-spring-boot-starter 启动器编码工作就完成了。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>创建一个 spring boot 工程，在 pom.xml 中引入 demo-spring-boot-starter 依赖</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;    </span><br><span class="line">    &lt;groupId&gt;org.suifeng.demo&lt;&#x2F;groupId&gt;    </span><br><span class="line">    &lt;artifactId&gt;demo-spring-boot-starter&lt;&#x2F;artifactId&gt;    </span><br><span class="line">    &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>此处请根据各自的 maven 工程信息引入依赖</p></blockquote><h3 id="配置-yaml-属性"><a href="#配置-yaml-属性" class="headerlink" title="配置 yaml 属性"></a>配置 yaml 属性</h3><p>在 application.yaml 中添加如下属性</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">people:</span>  </span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">小花</span>  </span><br><span class="line">    <span class="attr">gender:</span> <span class="string">女</span></span><br></pre></td></tr></table></figure><blockquote><p>注意 “:” 右边有个空格</p></blockquote><h3 id="创建-StarterController-类"><a href="#创建-StarterController-类" class="headerlink" title="创建 StarterController 类"></a>创建 StarterController 类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.suifeng.demo.project.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.suifeng.demo.spring.boot.People;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/starter"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarterController</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>    </span><br><span class="line">    <span class="keyword">private</span> People people;    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/greet"</span>)    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        System.out.println(people.greet());    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，调用请求看看~~</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>短</title>
    <url>/archives/d5256b7.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><blockquote class="blockquote-center"><p>一天很短，<br>短得来不及拥抱清晨，<br>就已经手握黄昏。</p><p>一年很短，<br>短得来不及细品初春殷红窦绿，<br>就要打点素裹秋霜。</p><p>一生很短，<br>短的来不及享用美好年华，<br>就已经身处迟暮。</p><p>总是经过的太快，<br>领悟的太晚，<br>我们要学会珍惜。</p><p>珍惜人生路上的亲情、友情、<br>同事情、同学情、朋友情。<br>一旦擦身而过，<br>也许永不邂逅。</p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>短文学</category>
      </categories>
      <tags>
        <tag>短文学</tag>
      </tags>
  </entry>
  <entry>
    <title>未选择的路</title>
    <url>/archives/8abcc3ae.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><p><img src="/archives/8abcc3ae/road.png" alt></p><a id="more"></a><blockquote class="blockquote-center"><p>黄色的树林里分出两条路，<br>可惜我不能同时去涉足，<br>我在那路口久久伫立，<br>我向着一条路极目望去，<br>直到它消失在丛林深处。</p><p>但我却选了另外一条路，<br>它荒草萋萋，十分幽寂，<br>显得更诱人，更美丽；<br>虽然在这条小路上，<br>很少留下旅人的足迹。</p><p>那天清晨落叶满地，<br>两条路都未经脚印污染。<br>啊，留下一条路等改日再见！<br>但我知道路径延绵无尽头，<br>恐怕我难以再回返。</p><p>也许多少年后在某个地方，<br>我将轻声叹息将往事回顾：<br>一片树林里分出两条路——<br>而我选择了人迹更少的一条，<br>从此决定了我一生的道路。</p></blockquote><blockquote><p>《未选择的路》是美国诗人罗伯特·弗罗斯特创作的文学作品。这首深邃的哲理诗展现了现实生活中人们处在十字路口时难以抉择的心情。在诗中，诗人选择了一条人迹稀少、布满荆棘的道路，正如诗人在现实生话中选择了不会带来丰富物质的写诗生活。诗人在作出抉择后，同时又遗憾“鱼和熊掌不可兼得”，只能选择一条路，并坚定地走下去，只有在多年以后的回忆中轻叹遗憾。</p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>短文学</category>
      </categories>
      <tags>
        <tag>短文学</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch 启动报错之 JDK 版本过低</title>
    <url>/archives/b2845630.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><h2 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h2><p>启动 ElasticSearch 时报如下错误：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RuntimeException[Java version: 1.7.0_40 suffers from critical bug https:&#x2F;&#x2F;bugs.openjdk.java.net&#x2F;browse&#x2F;JDK-8024830 which can cause data corruption.Please upgrade the JVM, see http:&#x2F;&#x2F;www.elastic.co&#x2F;guide&#x2F;en&#x2F;elasticsearch&#x2F;reference&#x2F;current&#x2F;_installation.html for current recommendations.If you absolutely cannot upgrade, please add -XX:-UseSuperWord to the JVM_OPTS environment variable.</span><br><span class="line">Upgrading is preferred, this workaround will result in degraded performance.</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="二、问题排查"><a href="#二、问题排查" class="headerlink" title="二、问题排查"></a>二、问题排查</h2><p>经排查发现系统已安装 jdk1.7.0_79,但是 /usr/bin/java 的软链接指向了 /etc/alternatives/java，而 /etc/alternatives/java 却又指向 /usr/lib/jvm/jre-1.7.0-openjdk.x86_64/bin/java，导致 ElasticSearch识别的是 jdk1.7.0 版本的 JDK。</p><blockquote><p>openjdk 是 Linux 系统安装时附带的</p></blockquote><h2 id="三、问题解决"><a href="#三、问题解决" class="headerlink" title="三、问题解决"></a>三、问题解决</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;java&#x2F;jdk1.7.0_79&#x2F;bin&#x2F;java &#x2F;usr&#x2F;bin&#x2F;java</span><br></pre></td></tr></table></figure><h3 id="方法二-建议"><a href="#方法二-建议" class="headerlink" title="方法二(建议)"></a>方法二(建议)</h3><p>添加 jdk1.7.0_79 的 Link 值</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;java java &#x2F;usr&#x2F;java&#x2F;jdk1.7.0_79&#x2F;bin&#x2F;java 999999</span><br></pre></td></tr></table></figure><p>选择一个 Link 值：即选择一个版本的 Java</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update-alternatives --config java</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
        <tag>faq</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL5.7 配置日志审计</title>
    <url>/archives/2656779.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><p>数据库开启日志审计可以记录用户访问数据库的行为。</p><a id="more"></a><h2 id="一、查询审计配置情况"><a href="#一、查询审计配置情况" class="headerlink" title="一、查询审计配置情况"></a>一、查询审计配置情况</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global variables like &#39;log_timestamps&#39;;</span><br><span class="line">mysql&gt; show global variables like &#39;%general%&#39;</span><br></pre></td></tr></table></figure><h2 id="二、永久开启审计"><a href="#二、永久开启审计" class="headerlink" title="二、永久开启审计"></a>二、永久开启审计</h2><p>在 <code>/etc/my.cnf</code> 中添加下述配置，可 <code>vim /etc/my.cnf</code> 打开</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">general_log &#x3D; on</span><br><span class="line">general_log_file &#x3D; &#x2F;var&#x2F;log&#x2F;generalLog.log</span><br><span class="line">log_timestamps &#x3D; SYSTEM</span><br></pre></td></tr></table></figure><blockquote><p>general_log：on 为开启；off 为关闭<br>general_log_file：审计信息存储位置</p></blockquote><h2 id="三、临时开启审计"><a href="#三、临时开启审计" class="headerlink" title="三、临时开启审计"></a>三、临时开启审计</h2><p>在 MySQL 中执行以下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global general_log &#x3D; on;</span><br><span class="line">mysql&gt; set global general_log_file &#x3D; &#x2F;var&#x2F;log&#x2F;generalLog.log</span><br><span class="line">mysql&gt; set global log_timestamps &#x3D; SYSTEM;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>日志审计</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 实现文件 ZIP 压缩并解决中文文件名乱码</title>
    <url>/archives/c5372dcb.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><p>本文介绍的是用 Java 实现文件 ZIP 压缩以及解决中文文件名乱码问题。</p><a id="more"></a><h2 id="一、文件压缩的中文乱码问题"><a href="#一、文件压缩的中文乱码问题" class="headerlink" title="一、文件压缩的中文乱码问题"></a>一、文件压缩的中文乱码问题</h2><h3 id="1、中文文件名的乱码解决"><a href="#1、中文文件名的乱码解决" class="headerlink" title="1、中文文件名的乱码解决"></a>1、中文文件名的乱码解决</h3><p>对于压缩的文件，当文件名称是中文时，若使用 <strong>JDK API 中自带的类（java.util.zip.ZipEntry; java.util.zip.ZipOutputStream;）</strong>进行压缩，压缩完成后，可以看到压缩包中的文件名称是乱码(文件的内容无乱码问题)。此时只要用 <strong>ANT 中的 ant.jar 中的类（org.apache.tools.zip.ZipEntry; org.apache.tools.zip.ZipOutputStream;）</strong>就可以解决此问题。</p><h3 id="2、ant-jar-依赖"><a href="#2、ant-jar-依赖" class="headerlink" title="2、ant.jar 依赖"></a>2、ant.jar 依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ant.jar 用于解决文件解压缩乱码问题 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;ant&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;ant&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.6.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="二、JAVA-实现-ZIP-压缩源代码"><a href="#二、JAVA-实现-ZIP-压缩源代码" class="headerlink" title="二、JAVA 实现 ZIP 压缩源代码"></a>二、JAVA 实现 ZIP 压缩源代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import org.apache.tools.zip.ZipEntry;</span><br><span class="line">import org.apache.tools.zip.ZipOutputStream;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * zip压缩工具包</span><br><span class="line"> * @Class ZipUtils</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ZipUtils &#123;</span><br><span class="line">	</span><br><span class="line">	private final static Logger logger &#x3D; LoggerFactory.getLogger(ZipUtils.class);</span><br><span class="line">	</span><br><span class="line">	private static final int BUFFER_SIZE &#x3D; 2 * 1024;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * 压缩成ZIP</span><br><span class="line">	 * @param srcFilePath 压缩文件路径</span><br><span class="line">	 * @param tarFilePath 目标 ZIP 输出路径</span><br><span class="line">	 * @param KeepDirStructure 是否保留原来的目录结构,true:保留目录结构;</span><br><span class="line">	 *            false:所有文件跑到压缩包根目录下(注意：不保留目录结构可能会出现同名文件,会压缩失败)</span><br><span class="line">	 * @throws Exception 压缩失败会抛出异常</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static boolean toZip(String srcFilePath, String tarFilePath, boolean KeepDirStructure) throws Exception &#123;</span><br><span class="line">		boolean isCompressSuccess &#x3D; false;</span><br><span class="line">		long start &#x3D; System.currentTimeMillis();</span><br><span class="line">		FileOutputStream fos &#x3D; null;</span><br><span class="line">		ZipOutputStream zos &#x3D; null;</span><br><span class="line">		try &#123;</span><br><span class="line">			File sourceFile &#x3D; new File(srcFilePath);</span><br><span class="line">			if (!sourceFile.exists()) &#123;</span><br><span class="line">				throw new FileNotFoundException(&quot;待压缩文件 [&quot; + srcFilePath + &quot;]不存在.&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			fos &#x3D; new FileOutputStream(new File(tarFilePath));</span><br><span class="line">			zos &#x3D; new ZipOutputStream(fos);</span><br><span class="line">			&#x2F;&#x2F; 设置压缩的编码，解决压缩路径中的中文乱码问题</span><br><span class="line">			zos.setEncoding(&quot;UTF-8&quot;);            </span><br><span class="line">			compress(sourceFile, zos, sourceFile.getName(), KeepDirStructure);</span><br><span class="line">			isCompressSuccess &#x3D; true;</span><br><span class="line">			long end &#x3D; System.currentTimeMillis();</span><br><span class="line">			logger.info(&quot;【文件压缩】 压缩完成，耗时：&#123;&#125; ms&quot;, (end - start));</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			logger.error(&quot;【文件压缩】 压缩失败&quot;, e);</span><br><span class="line">			throw new RuntimeException(&quot;文件压缩失败&quot;, e);</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			closeOutPutStream(zos);</span><br><span class="line">			closeOutPutStream(fos);</span><br><span class="line">		&#125;</span><br><span class="line">		return isCompressSuccess;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * 递归压缩方法</span><br><span class="line">	 * @param sourceFile 源文件</span><br><span class="line">	 * @param zos zip输出流</span><br><span class="line">	 * @param name 压缩后的名称</span><br><span class="line">	 * @param KeepDirStructure 是否保留原来的目录结构,true:保留目录结构;</span><br><span class="line">	 *            false:所有文件跑到压缩包根目录下(注意：不保留目录结构可能会出现同名文件,会压缩失败)</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	private static void compress(File sourceFile, ZipOutputStream zos, String name, boolean KeepDirStructure)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		byte[] buf &#x3D; new byte[BUFFER_SIZE];</span><br><span class="line">		if (sourceFile.isFile()) &#123;</span><br><span class="line">			&#x2F;&#x2F; 向zip输出流中添加一个zip实体，构造器中name为zip实体的文件的名字</span><br><span class="line">			zos.putNextEntry(new ZipEntry(name));</span><br><span class="line">			&#x2F;&#x2F; copy文件到zip输出流中</span><br><span class="line">			int len;</span><br><span class="line">			FileInputStream in &#x3D; new FileInputStream(sourceFile);</span><br><span class="line">			while ((len &#x3D; in.read(buf)) !&#x3D; -1) &#123;</span><br><span class="line">				zos.write(buf, 0, len);</span><br><span class="line">			&#125;</span><br><span class="line">			zos.closeEntry();</span><br><span class="line">			in.close();</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			File[] listFiles &#x3D; sourceFile.listFiles();</span><br><span class="line">			if (listFiles &#x3D;&#x3D; null || listFiles.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">				&#x2F;&#x2F; 需要保留原来的文件结构时,需要对空文件夹进行处理</span><br><span class="line">				if (KeepDirStructure) &#123;</span><br><span class="line">					&#x2F;&#x2F; 空文件夹的处理</span><br><span class="line">					zos.putNextEntry(new ZipEntry(name + &quot;&#x2F;&quot;));</span><br><span class="line">					&#x2F;&#x2F; 没有文件，不需要文件的copy</span><br><span class="line">					zos.closeEntry();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				for (File file : listFiles) &#123;</span><br><span class="line">					&#x2F;&#x2F; 判断是否需要保留原来的文件结构</span><br><span class="line">					if (KeepDirStructure) &#123;</span><br><span class="line">						&#x2F;&#x2F; 注意：file.getName()前面需要带上父文件夹的名字加一斜杠,</span><br><span class="line">						&#x2F;&#x2F; 不然最后压缩包中就不能保留原来的文件结构,即：所有文件都跑到压缩包根目录下了</span><br><span class="line">						compress(file, zos, name + &quot;&#x2F;&quot; + file.getName(), KeepDirStructure);</span><br><span class="line">					&#125; else &#123;</span><br><span class="line">						compress(file, zos, file.getName(), KeepDirStructure);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * 释放资源</span><br><span class="line">	 * @Title closeOutPutStream</span><br><span class="line">	 * @param ops</span><br><span class="line">	 * @return void</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void closeOutPutStream(OutputStream ops) &#123;</span><br><span class="line">		if (ops !&#x3D; null) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				ops.close();</span><br><span class="line">			&#125; catch(IOException ex) &#123;</span><br><span class="line">				logger.error(&quot;关闭输出流失败&quot;, ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>文件压缩</tag>
        <tag>中文乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 服务启动失败</title>
    <url>/archives/23592fef.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>启动 MySQL 服务报 starting MySQL….the server quit without updating PID file [failed]sqldata/MySQL.pid</p><a id="more"></a><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><p>通过分析 mysqld.log 日志信息发现服务启动过程中有几处 ERROR 提示，信息如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2016-07-26T02:07:28.316099Z 0 [ERROR] Could not create unix socket lock file &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;tmp&#x2F;mysql.sock.lock.  </span><br><span class="line">2016-07-26T02:07:28.316115Z 0 [ERROR] Unable to setup unix socket lock file.  </span><br><span class="line">2016-07-26T02:07:28.316128Z 0 [ERROR] Aborting</span><br></pre></td></tr></table></figure><p>分析日志提示可能是由于不能创建 socket lock 文件导致终止了，到对应的目录下面看了下，发现在 MySQL 没有启动的时候有-rw——-. 1 mysql mysql 6 Oct 17 10:00 mysql.sock.lock这个文件存在，所以应该是由于存在了sock的锁文件，导致启动的时候不能创建该文件导致MYSQL启动失败。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p><strong>删除或改名备份</strong>后，再次启动正常。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>faq</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 @RequestPart 同时接收表单数据和 MultipartFile 数据</title>
    <url>/archives/d901f37d.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><p>项目中有使用 RestTemplate 转发表单数据和上传文件，之前都是将表单数据 Json 传到后台进行反序列化，这样一来代码就显得十分不美观，后来发现使用 <strong>@RequestPart</strong> 注解可直接进行数据绑定，十分优雅地解决了这个问题。</p><a id="more"></a><h2 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(FormData formData, MultipartFile[] files)</span> </span>&#123;</span><br><span class="line">        MultiValueMap&lt;String, Object&gt; multiValueMap = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">        multiValueMap.add(<span class="string">"formData"</span>, formData);</span><br><span class="line">        List&lt;Resource&gt; tmpResource = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile multipartFile : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (multipartFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">                tmpResource.add(multipartFile.getResource());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        multiValueMap.addAll(<span class="string">"files"</span>, tmpResource);</span><br><span class="line">        restTemplate.postForObject(<span class="string">"localhost:8080/demo/save"</span>, multiValueMap, Void<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上传 MultipartFile 形式文件时，需要用 MultiValueMap&lt;String, Object&gt; 类装载表单数据和文件对象。其中，文件对象需将 multipartFile.getResource() 的数据传递给 MultiValueMap。</p></blockquote><h2 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(@RequestPart(required = <span class="keyword">false</span>)</span> FormData formData,</span></span><br><span class="line"><span class="function">                     @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"files"</span>, required=<span class="keyword">false</span>)</span> MultipartFile[] files) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/a326a2ffafde" target="_blank" rel="noopener external nofollow noreferrer">https://www.jianshu.com/p/a326a2ffafde</a></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>restTemplate</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos6.5 下安装 MySQL5.7.14-RPM 方式</title>
    <url>/archives/409fb0bb.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><p>本文介绍的是 MySQL5.7.14 在 Centos6.5 下 RPM 方式的安装情况。</p><a id="more"></a><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><h3 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1.安装环境"></a>1.安装环境</h3><blockquote><p>MySQL 版本：mysql-5.7.14-1.el6.x86_64.rpm-bundle.tar<br>操作系统：Centos6.5</p></blockquote><h3 id="2-名词解释"><a href="#2-名词解释" class="headerlink" title="2.名词解释"></a>2.名词解释</h3><p><strong>文中出现的类似 <code>/opt</code> 等，均为本文安装时自定义配置信息，实际安装时请对号入座。</strong></p><blockquote><p><code>/opt</code> ：压缩包上传目录</p></blockquote><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="1-检查是否已安装-MySQL-组件"><a href="#1-检查是否已安装-MySQL-组件" class="headerlink" title="1.检查是否已安装 MySQL 组件"></a>1.检查是否已安装 MySQL 组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master ~]# rpm -qa | grep mysql</span><br></pre></td></tr></table></figure><p>若查询显示存在 MySQL 组件，则执行下面语句卸载。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master ~]# rpm -e --nodeps mysql</span><br></pre></td></tr></table></figure><p>卸载完了再检查一下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master ~]# rpm -qa | grep mysql</span><br></pre></td></tr></table></figure><h3 id="2-安装MySQL"><a href="#2-安装MySQL" class="headerlink" title="2.安装MySQL"></a>2.安装MySQL</h3><p>解压 MySQL 安装包，并 <code>rpm -ivh ***</code> 安装解压包里的组件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master ~]# cd &#x2F;opt</span><br><span class="line">[root@Master opt]# tar -xvf mysql-5.7.14-1.el6.x86_64.rpm-bundle.tar</span><br><span class="line">[root@Master opt]# rpm -ivh mysql-community-common-5.7.14-1.el6.x86_64.rpm</span><br><span class="line">[root@Master opt]# rpm -ivh mysql-community-libs-5.7.14-1.el6.x86_64.rpm</span><br><span class="line">[root@Master opt]# rpm -ivh mysql-community-client-5.7.14-1.el6.x86_64.rpm</span><br><span class="line">[root@Master opt]# rpm -ivh mysql-community-server-5.7.14-1.el6.x86_64.rpm</span><br></pre></td></tr></table></figure><blockquote><p><code>/opt</code> 为压缩包上传目录<br>一定要按顺序安装 mysql-community-common，mysql-community-libs 等组件，否则会报缺少依赖错误。</p></blockquote><h3 id="3-修改-MySQL-的配置文件"><a href="#3-修改-MySQL-的配置文件" class="headerlink" title="3.修改 MySQL 的配置文件"></a>3.修改 MySQL 的配置文件</h3><p>在 <code>/etc/my.cnf</code> 中配置字符集等参数，可用 <code>vim /etc/my.cnf</code> 打开</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在[mysqld]下面添加</span><br><span class="line">character-set-server&#x3D;utf8mb4</span><br><span class="line">在[client]下面添加</span><br><span class="line">default-character-set&#x3D;utf8mb4</span><br></pre></td></tr></table></figure><h3 id="4-设置服务开机启动"><a href="#4-设置服务开机启动" class="headerlink" title="4.设置服务开机启动"></a>4.设置服务开机启动</h3><p>查看 MySQL 是否自启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master opt]# chkconfig --list | grep mysqld</span><br></pre></td></tr></table></figure><p>设置服务开机启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master opt]# chkconfig mysqld on</span><br></pre></td></tr></table></figure><h3 id="5-启动服务"><a href="#5-启动服务" class="headerlink" title="5.启动服务"></a>5.启动服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master opt]# service mysqld start</span><br></pre></td></tr></table></figure><h3 id="6-修改初始密码并设置远程登录"><a href="#6-修改初始密码并设置远程登录" class="headerlink" title="6.修改初始密码并设置远程登录"></a>6.修改初始密码并设置远程登录</h3><p>获取初始密码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master opt]# grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br></pre></td></tr></table></figure><p>以 root 用户登录 MySQL</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master opt]# mysql -u root -p</span><br></pre></td></tr></table></figure><p>修改 root 用户本地登录密码，第一次设置初始密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set password for root@localhost&#x3D;password(&quot;新密码&quot;);</span><br></pre></td></tr></table></figure><p>创建远程登录用户 root</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;密码&#39;;</span><br></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p>退出 MySQL 终端</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; exit;</span><br></pre></td></tr></table></figure><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><p>使用 Navicat Premium 12、SQLyog 等客户端工具连接数据库进行连通性测试。若提示连接成功，则表明 MySQL 安装完毕。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>centos</tag>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos6.5 下安装 MySQL5.7.11-TAR 方式</title>
    <url>/archives/c121720d.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><p>本文介绍的是 MySQL5.7.11 在 Centos6.5 下 TAR 方式的安装情况。</p><a id="more"></a><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><h3 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1.安装环境"></a>1.安装环境</h3><blockquote><p>MySQL版本：mysql-5.7.11-linux-glibc2.5-x86_64.tar<br>操作系统：Centos6.5</p></blockquote><h3 id="2-名词解释"><a href="#2-名词解释" class="headerlink" title="2.名词解释"></a>2.名词解释</h3><p><strong>文中出现的类似 <code>/opt</code> ，<code>/app/MySQL</code> ，<code>/app/mysqldata</code> 等，均为本文安装时自定义配置信息，实际安装时请对号入座。</strong></p><blockquote><p><code>{MYSQL_BASE_DIR}</code>：MySQL的安装目录，本文为 <code>/app/MySQL</code><br><code>{MYSQL_DATA_DIR}</code>：MySQL的数据文件目录，本文为 <code>/app/mysqldata</code><br><code>/opt</code> ：压缩包上传目录</p></blockquote><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="1-检查是否已安装-MySQL-组件"><a href="#1-检查是否已安装-MySQL-组件" class="headerlink" title="1.检查是否已安装 MySQL 组件"></a>1.检查是否已安装 MySQL 组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master ~]# rpm -qa | grep mysql</span><br></pre></td></tr></table></figure><p>若查询显示存在 MySQL 组件，则执行下面语句卸载。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master ~]# rpm -e --nodeps mysql</span><br></pre></td></tr></table></figure><p>卸载完了再检查一下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master ~]# rpm -qa | grep mysql</span><br></pre></td></tr></table></figure><h3 id="2-创建用户及用户组"><a href="#2-创建用户及用户组" class="headerlink" title="2.创建用户及用户组"></a>2.创建用户及用户组</h3><blockquote><p>本文用户及用户组均为 mysql</p></blockquote><p>删除用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master ~]# userdel mysql</span><br></pre></td></tr></table></figure><p>删除用户组</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master ~]# groupdel mysql</span><br></pre></td></tr></table></figure><p>创建名为 mysql 的用户组</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master ~]# groupadd mysql</span><br></pre></td></tr></table></figure><p>在用户组 mysql 下创建名为 mysql 的用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master ~]# useradd -g mysql mysql</span><br></pre></td></tr></table></figure><h3 id="3-解压安装包"><a href="#3-解压安装包" class="headerlink" title="3.解压安装包"></a>3.解压安装包</h3><p>解压 MySQL 安装包，并将解压包里的文件拷贝至 MySQL 的安装目录。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master ~]# cd &#x2F;opt</span><br><span class="line">[root@Master opt]# tar -xvf mysql-5.7.11-linux-glibc2.5-x86_64.tar</span><br><span class="line">[root@Master opt]# tar -zxvf mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz</span><br><span class="line">[root@Master opt]# cp -r mysql-5.7.11-linux-glibc2.5-x86_64 &#x2F;app&#x2F;MySQL</span><br></pre></td></tr></table></figure><blockquote><p><code>/opt</code> 为压缩包上传目录<br><code>/app/MySQL</code> 为 MySQL 安装目录</p></blockquote><h3 id="4-初始化数据库"><a href="#4-初始化数据库" class="headerlink" title="4.初始化数据库"></a>4.初始化数据库</h3><p>切换系统用户 mysql ，初始化数据库。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master opt]# su - mysql</span><br><span class="line">[root@Master ~]# cd &#x2F;app&#x2F;MySQL</span><br><span class="line">[root@Master MySQL]# .&#x2F;bin&#x2F;mysqld --user&#x3D;mysql --basedir&#x3D;&#x2F;app&#x2F;MySQL --datadir&#x3D;&#x2F;app&#x2F;mysqldata --initialize</span><br></pre></td></tr></table></figure><p>下图中红色方框内的随机密码，在修改密码时要用到，请先保存。</p><p><img src="/archives/c121720d/mysql%E5%AE%89%E8%A3%85%E5%AF%86%E7%A0%81.png" alt></p><h3 id="5-创建软连接"><a href="#5-创建软连接" class="headerlink" title="5.创建软连接"></a>5.创建软连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master MySQL]# ln -s &#x2F;app&#x2F;MySQL&#x2F;bin&#x2F;mysql &#x2F;usr&#x2F;bin&#x2F;mysql</span><br></pre></td></tr></table></figure><h3 id="6-修改-MySQL-的配置文件"><a href="#6-修改-MySQL-的配置文件" class="headerlink" title="6.修改 MySQL 的配置文件"></a>6.修改 MySQL 的配置文件</h3><p>拷贝 <code>{MYSQL_BASE_DIR}/support-files/my-default.cnf</code> 作为 MySQL 的配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master MySQL]# cp &#x2F;app&#x2F;MySQL&#x2F;support-files&#x2F;my-default.cnf &#x2F;etc&#x2F;my.cnf</span><br></pre></td></tr></table></figure><p>在 <code>/etc/my.cnf</code> 中配置字符集 basedir、datadir 等参数，可用 <code>vim /etc/my.cnf</code> 打开</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir&#x3D;&#x2F;app&#x2F;MySQL</span><br><span class="line">datadir&#x3D;&#x2F;app&#x2F;mysqldata</span><br><span class="line">user&#x3D;mysql</span><br><span class="line">character-set-server&#x3D;utf8mb4</span><br><span class="line">log_error&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line">log_timestamps&#x3D;SYSTEM</span><br><span class="line">sql_mode&#x3D;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8mb4</span><br></pre></td></tr></table></figure><blockquote><p>basedir：MySQL 的安装目录，本文为 <code>/app/MySQL</code><br>datadir：MySQL 的数据文件目录，本文为 <code>/app/mysqldata</code><br>log_timestamps：MySQl5.7.2 中新增的参数，用于控制 error_log、slow_log、genera log 等记录日志的显示时间，默认为 <code>UTC</code> ，本文为 <code>SYSTEM</code></p></blockquote><h3 id="7-设置服务开机启动"><a href="#7-设置服务开机启动" class="headerlink" title="7.设置服务开机启动"></a>7.设置服务开机启动</h3><p>拷贝 <code>{MYSQL_BASE_DIR}/support-files/mysql.server</code> 作为启动脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master MySQL]# cp &#x2F;app&#x2F;MySQL&#x2F;support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysql</span><br></pre></td></tr></table></figure><p>在 <code>/etc/init.d/mysql</code> 中设置 basedir 和 datadir，可用 <code>vim /etc/init.d/mysql</code> 打开</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">basedir &#x3D;&#x2F;app&#x2F;MySQL</span><br><span class="line">datadir&#x3D;&#x2F;app&#x2F;mysqldata</span><br></pre></td></tr></table></figure><p>设置开机启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master MySQL]# chkconfig mysql on</span><br></pre></td></tr></table></figure><h3 id="8-设置MySQL-服务的启停"><a href="#8-设置MySQL-服务的启停" class="headerlink" title="8.设置MySQL 服务的启停"></a>8.设置MySQL 服务的启停</h3><p>这一步只需启动 MySQL 服务即可</p><p>启动服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master MySQL]# service mysql start</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master MySQL]# service mysql restart</span><br></pre></td></tr></table></figure><p>停止服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master MySQL]# service mysql stop</span><br></pre></td></tr></table></figure><h3 id="9-修改-root-用户的密码"><a href="#9-修改-root-用户的密码" class="headerlink" title="9.修改 root 用户的密码"></a>9.修改 root 用户的密码</h3><p>以 root 用户登录 MySQL，输入第 4 步的随机密码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Master MySQL]# mysql -uroot -p</span><br></pre></td></tr></table></figure><p>修改 root 用户本地登录密码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql</span><br><span class="line">mysql&gt; set password for root@localhost&#x3D;password(&#39;新密码&#39;);</span><br></pre></td></tr></table></figure><p>创建远程登录用户 root</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;密码&#39;;</span><br></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p>退出 MySQL 终端</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; exit;</span><br></pre></td></tr></table></figure><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><p>使用 Navicat Premium 12、SQLyog 等客户端工具连接数据库进行连通性测试。若提示连接成功，则表明 MySQL 安装完毕。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>centos</tag>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建好了</title>
    <url>/archives/4a17b156.html</url>
    <content><![CDATA[<!-- build time:Tue Mar 17 2020 16:00:45 GMT+0800 (GMT+08:00) --><p>博客搭建好了</p><!-- rebuild by neat -->]]></content>
  </entry>
</search>
